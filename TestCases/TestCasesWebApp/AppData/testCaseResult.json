{"Name":"local_part_of_id_with_space","Result":true,"SerializedDocument":"<?xml version='1.0' encoding='ASCII'?>\r\n<prov:document xmlns:ex=\"https://example.org/\" xmlns:prov=\"http://www.w3.org/ns/prov#\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  <prov:entity prov:id=\"ex:a b c\"/>\r\n</prov:document>","DeserializedDocument":"<document xmlns=\"http://www.w3.org/ns/prov#\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:prov=\"http://www.w3.org/ns/prov#\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  \r\n    <entity xmlns:ex=\"https://example.org/\" prov:id=\"ex:a b c\"/>\r\n  \r\n</document>","Exception":null,"Description":"When creating entity in memory, Python uses [ProvBundle#entity()](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L1623), which just calls [ProvBundle#new_record()](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L1578) method with identifier \\`ex:a b c\\`:\r\n\r\n\\`return self.new_record(PROV_ENTITY, identifier, None, other_attributes)\\`\r\n\r\nIn ProvBundle#new_record(), when creating new record with identifier, [ProvBundle#valid_qualified_name()](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L1357) method is called on line 1604:\r\n\\`\\`\\`\r\nnew_record = PROV_REC_CLS[record_type](\r\n    self, self.valid_qualified_name(identifier), attr_list\r\n)\r\n\\`\\`\\`\r\n\r\nProvBundle#valid_qualified_name() just calls [NamespaceManager#valid_qualified_name()](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L1139). There is no validation of QualifiedName in this method. \r\n\r\nWhen serializing XML format, there is no validation of identifier.\r\nBut this is not wrong, since the serializer should not expect that PROV document with invalid identifier can be generated by Java. Its the model where invalid QualifiedName can be generated, where the issue starts.\r\n\r\nTherefore, Python creates document with invalid identifier.\r\n\r\nWhen deserializing XML format, Java uses [jackson](https://github.com/FasterXML/jackson) library.\r\nWhen deserializing the identifier, Java uses [CustomQualifiedNameDeserializer#deserialize()](https://github.com/lucmoreau/ProvToolbox/blob/ca05849c88a84aae736355569a8bdae78c68b072/modules-core/prov-jsonld-xml/src/main/java/org/openprovenance/prov/core/xml/serialization/deserial/CustomQualifiedNameDeserializer.java#L23) method, which uses [Namespace#stringToQualifiedName()](https://github.com/lucmoreau/ProvToolbox/blob/ca05849c88a84aae736355569a8bdae78c68b072/modules-core/prov-model/src/main/java/org/openprovenance/prov/model/Namespace.java#L220) on line 43:\r\n\r\n\\`return DeserializerUtil.unescapeQualifiedName(ns.stringToQualifiedName(text, pf));\\`\r\n\r\nNamespace#stringToQualifiedName() method does no validation of identifier.\r\n\r\nTherefore, Java creates document with invalid identifier."}