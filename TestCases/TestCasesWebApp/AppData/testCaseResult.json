{"Name":"multiple_prov_value","Result":false,"SerializedDocument":"<?xml version='1.0' encoding='ASCII'?>\r\n<prov:document xmlns:ex=\"https://example.org/\" xmlns:prov=\"http://www.w3.org/ns/prov#\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  <prov:entity prov:id=\"ex:e\">\r\n    <prov:value xsi:type=\"xsd:int\">1</prov:value>\r\n    <prov:value xsi:type=\"xsd:int\">2</prov:value>\r\n    <prov:value xsi:type=\"xsd:int\">3</prov:value>\r\n  </prov:entity>\r\n</prov:document>","DeserializedDocument":"<document xmlns=\"http://www.w3.org/ns/prov#\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:prov=\"http://www.w3.org/ns/prov#\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  \r\n    <entity xmlns:ex=\"https://example.org/\" prov:id=\"ex:e\">\r\n      <value xsi:type=\"xsd:int\">3</value>\r\n    </entity>\r\n  \r\n</document>","Exception":null,"Description":"Python represents prov:value attributes in the _attributes dictionary\r\nThis is how the dictionary is intialized: self._attributes = defaultdict(set).\r\nThis means that the values will be of type set, therefore more prov:value attributes are possible which is not complaint with the PROV-N which states:\r\n\"The attribute prov:value may occur at most once in a set of attribute-value pairs.\"\r\nWhen serializing XML Python uses the custom provxml module, which has no problem with serializing multiple prov:values.\r\n\r\nSince Java represents prov:value attribute as field value which has type Optional<Value> there can be only one value.\r\nJava when deserializing  XML uses the method.\r\npublic void setIndexedAttributes(Object qn, Set<Attribute> attributes) {\r\n        List<Value> values_discard = new LinkedList();\r\n        List<Role> roles_discard = new LinkedList();\r\n        u.distribute((QualifiedName)qn, attributes, this.getLabel(), values_discard, this.getLocation(), this.getType(), roles_discard, this.getOther());\r\n        if (!values_discard.isEmpty()) {\r\n            this.value = Optional.of((Value)values_discard.get(0));\r\n        }\r\n\r\n    }\r\n\r\nWhere attributes='the latest prov:value' and what u.distribute does is puts the newest prov:value to values_discard. Thats why the last prov:value is serialized as opposed to PROVN where only the first prov:value is serialized "}