Java represents the startTime and endTime as [XMLGregorianCalendar](https://docs.oracle.com/javase/8/docs/api/javax/xml/datatype/XMLGregorianCalendar.html), which represents microseconds as [BigDecimal](https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html).
When serializing JSON format, Java uses [jackson](https://github.com/FasterXML/jackson) library.
When serializing the startTime and endTime Java uses [CustomDateSerializer#serialize()]() method.
This method just uses toString() method on the XMLGregorianCalendar object. So there is no problem with high precision times.


When deserializing JSON format Python uses the [json](https://docs.python.org/3/library/json.html) library, more specifically the json.load() function which takes custom decoder.
The custom decoder in [provjson](https://github.com/trungdong/prov/blob/master/src/prov/serializers/provjson.py) module is [ProvJSONDecoder](https://github.com/trungdong/prov/blob/master/src/prov/serializers/provjson.py#L101).
Python deserializes the startTime and endTime with function [parse_xsd_datetime()](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L41) which uses [dateutil.parser](https://dateutil.readthedocs.io/en/stable/parser.html) for parsing the date on line 43:

\` return dateutil.parser.parse(value)\`

The dateutil.parser#parse() method converts microseconds like this:

\`int(f.ljust(6, "0")[:6]\`

where \`f=microseconds\`. Therefore, the length of microseconds will always be 6 and high precision is lost.

The result of equals should be false, because the files are not the same, but since we are unable to create a document with high precision in Python we get true, which is not right.
More about not being able to create high precision startTime and endTime in:
\`\`\`
name: Loss of microseconds
format: json
serialize: python
deserialize: java
\`\`\`
