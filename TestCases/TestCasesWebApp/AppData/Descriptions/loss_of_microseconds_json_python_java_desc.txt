Prov Python represents the prov:startTime and prov:endTime attributes as datetime.datetime(https://docs.python.org/3/library/datetime.html#datetime-objects)
Because when creating activity it uses the [_ensure_datetime()](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L34) function, which uses [dateutil.parser](https://dateutil.readthedocs.io/en/stable/parser.html), on line 36:

\` return dateutil.parser.parse(value)\`

The dateutil.parser#parse() method converts microseconds like this:

\`int(f.ljust(6, "0")[:6]\`

where \`f=microseconds\`. Therefore, the length of microseconds will always be six, and high precision will be lost.

ProvToolbox uses [jackson](https://github.com/FasterXML/jackson) library when deserializing from PROV-JSON.
When deserializing the prov:startTime and prov:endTime, ProvToolbox uses default jackson deserializer. 
When deserializing microseconds, this deserializer uses method StdDateFormat#_parseAsISO8601(), and this method cuts the microseconds to 3 decimal points:
\`\`\`
int msecs = 0;
int fractLen = end - start;
switch (fractLen) {
    default:
        if (fractLen > 9) {
            throw new ParseException(String.format("Cannot parse date \"%s\": invalid fractional seconds '%s'; can use at most 9 digits", dateStr, m.group(1).substring(1)), start);
        }
    case 3:
        msecs += dateStr.charAt(start + 2) - 48;
    case 2:
        msecs += 10 * (dateStr.charAt(start + 1) - 48);
    case 1:
        msecs += 100 * (dateStr.charAt(start) - 48);
    case 0:
        cal.set(14, msecs);
}
\`\`\`

Therefore, some precision is lost here.