PROV-DM states: ["The attribute prov:value may occur at most once in a set of attribute-value pairs."](https://www.w3.org/TR/prov-dm/#term-attribute-value)


The [Entity](https://github.com/lucmoreau/ProvToolbox/blob/20a9edf219e84c383d28283bc199d9ac32903687/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/Entity.java) class in Java has private field [value](https://github.com/lucmoreau/ProvToolbox/blob/20a9edf219e84c383d28283bc199d9ac32903687/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/Entity.java#L22).
This means that prov:value may occur at most once and is compliant with the PROV-DM.
When trying to put multiple prov:value attributes in java, when creating the entity in [constructor](https://github.com/lucmoreau/ProvToolbox/blob/20a9edf219e84c383d28283bc199d9ac32903687/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/Entity.java#L31):
On line 39, the [ProvUtilities#populateAttributes()](https://github.com/lucmoreau/ProvToolbox/blob/20a9edf219e84c383d28283bc199d9ac32903687/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/ProvUtilities.java#L141) method is used

\`u.populateAttributes(attributes, labels, location, type, new LinkedList<>(), other, valueHolder);\`

It iterates through all attributes and assigns only first occurance of prov:value like this in switch on line 165:
\`\`\`
case PROV_VALUE:
    if (!foundValue) {
        foundValue = true;
        value[0] = (org.openprovenance.prov.model.Value)attribute;
    }
\`\`\`


And then in constructor, prov:value is assigned on line 40:

\`value=Optional.ofNullable(valueHolder[0]);\`

This means that the first value in attributes will be the value of entity.

When serializing PROVN format, Java uses the [custom ProvSerializer](https://github.com/lucmoreau/ProvToolbox/blob/master/modules-core/prov-n/src/main/java/org/openprovenance/prov/notation/ProvSerialiser.java).
Java have no problem serializing document with entity with one prov:value.


PROVN deserialization in python is not implemented yet. 
As stated in [ProvPy features](https://pypi.org/project/prov/), "In-memory classes for PROV assertions, which can then be output as PROV-N", implying that only PROV-N serialization is supported.
It has been worked on but abandoned as you can see in this issue on library's [github](https://github.com/trungdong/prov/issues/122).




