Java allows to create prefix with space in memory, because it does no validation in the register method.

public void register(String prefix, String namespace) {
        if (prefix != null && !prefix.equals("")) {
            String old = (String)this.prefixes.get(prefix);
            if (old == null) {
                this.prefixes.put(prefix, namespace);
                if (this.namespaces.get(namespace) == null) {
                    this.namespaces.put(namespace, prefix);
                }
            } else {
                this.newPrefix(namespace);
            }
        } else if (this.defaultNamespace == null) {
            this.defaultNamespace = namespace;
        } else {
            this.newPrefix(namespace);
        }

    }

When serializing the records, Java uses the jackson library. While serializing the "ex ex:e" qualifiend name CustomQualifiedNameSerializer, which always writes the namespace to the xml document
public void serialize(QualifiedName q, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
        String prefix = q.getPrefix();
        String s = prefix + ":" + q.getLocalPart();
        StaxStreamWriterUtil.writeNamespace(jsonGenerator, prefix, q.getNamespaceURI());
        jsonGenerator.writeString(s);
    }

the StaxStreamWriterUtil.writeNamespace(jsonGenerator, prefix, q.getNamespaceURI()) uses the BufferingXmlWriter's public void writeAttribute(String prefix, String localName, char[] value, int offset, int vlen) method.
In this method the validity of prefix is checked.

this.verifyNameValidity(localName, this.mNsAware);

which throws the exception:  Illegal name character ' ' (code 32) in name "ex ex" (index #2)

Python does not get any file to deserialize.