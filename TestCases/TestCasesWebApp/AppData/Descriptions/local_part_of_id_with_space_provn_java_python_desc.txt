When creating new QualifiedName with method [Namespace#newQualifiedName()](https://github.com/lucmoreau/ProvToolbox/blob/ca05849c88a84aae736355569a8bdae78c68b072/modules-core/prov-model/src/main/java/org/openprovenance/prov/model/Namespace.java#L271), there is no validation in [constructor of QualifiedName](https://github.com/lucmoreau/ProvToolbox/blob/ca05849c88a84aae736355569a8bdae78c68b072/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/QualifiedName.java#L15) and also when creating a new entity with method [ProvFactory#newEntity()](https://github.com/lucmoreau/ProvToolbox/blob/ca05849c88a84aae736355569a8bdae78c68b072/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/ProvFactory.java#L166) and setting identifier in [Entity constructor](https://github.com/lucmoreau/ProvToolbox/blob/ca05849c88a84aae736355569a8bdae78c68b072/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/Entity.java#L31), there is no validation.
This means that we can create invalid identifiers in ProvToolbox.

When serializing PROV-N format, the identifier is not validated.
However, this is not wrong since the serializer should not expect ProvToolbox to generate a PROV document with an invalid QualifiedName. The problem arises in the model where an invalid QualifiedName can be generated.

PROV-N deserialization in Prov Python has not yet been implemented. 
As stated in [Prov Python features](https://pypi.org/project/prov/), "In-memory classes for PROV assertions, which can then be output as PROV-N," implying that only PROV-N serialization is supported.
It has been worked on but abandoned, as you can see in this issue on the library's [github](https://github.com/trungdong/prov/issues/122).