When creating new QualifiedName with method [Namespace#newQualifiedName()](https://github.com/lucmoreau/ProvToolbox/blob/ca05849c88a84aae736355569a8bdae78c68b072/modules-core/prov-model/src/main/java/org/openprovenance/prov/model/Namespace.java#L271), there is no validation in [constructor of QualifiedName](https://github.com/lucmoreau/ProvToolbox/blob/ca05849c88a84aae736355569a8bdae78c68b072/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/QualifiedName.java#L15) and also when creating new entity with method [ProvFactory#newEntity()](https://github.com/lucmoreau/ProvToolbox/blob/ca05849c88a84aae736355569a8bdae78c68b072/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/ProvFactory.java#L166) and setting identifier in [Entity constructor](https://github.com/lucmoreau/ProvToolbox/blob/ca05849c88a84aae736355569a8bdae78c68b072/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/Entity.java#L31), there is no validation.
This means that we can create invalid identifiers in Java.

When serializing PROVN format, there is no validation of identifier.
But this is not wrong, since the serializer should not expect that PROV document with invalid identifier can be generated by Java. Its the model where invalid QualifiedName can be generated, where the issue starts.

PROVN deserialization in python is not implemented yet. 
As stated in [ProvPy features](https://pypi.org/project/prov/), "In-memory classes for PROV assertions, which can then be output as PROV-N", implying that only PROV-N serialization is supported.
It has been worked on but abandoned as you can see in this issue on library's [github](https://github.com/trungdong/prov/issues/122).

