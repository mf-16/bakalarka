In Prov Python, every record is a subclass of [ProvRecord](https://github.com/trungdong/prov/blob/master/src/prov/model.py#L228), which has [value property](https://github.com/trungdong/prov/blob/master/src/prov/model.py#L361).
value property is a set, because _attributes is a [defaultdict](https://docs.python.org/3/library/collections.html#collections.defaultdict), where values are sets. It is constructed in [ProvRecord constructor](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L236) on line 246:

\`self._attributes = defaultdict(set)\`

Therefore, every ProvRecord object in Prov Python has a value property. In memory, you can create a record that is not an entity and has a prov:value attribute, which is not compatible with PROV-DM because PROV-DM states that prov:value attribute [can only be in entity](https://www.w3.org/TR/prov-dm/#term-attribute-value).

When serializing to PROV-JSON, there is no validation if the prov:value attribute is used in a record other than an entity.
However, this is not wrong since the serializer should not expect Prov Python to generate a  PROV document with prov:value in activity. The problem arises in the model where every ProvRecord has prov:value attribute.


ProvToolbox uses [jackson](https://github.com/FasterXML/jackson) library when deserializing from PROV-JSON.
During deserilization ProvToolbox throws exception:

\`Namespace.stringToQualifiedName(): Null namespace for prov:value namespace [Namespace (null) {ex=https://example.org/}, parent: null] (through reference chain: org.openprovenance.prov.core.json.serialization.SortedDocument["activity"]->java.util.LinkedHashMap["ex:ac"]->org.openprovenance.prov.vanilla.Activity["prov:value"])\`

This is because when Prov Python serializes to PROV-JSON, it does not serialize it with known namespaces (prov, xsd), and ProvToolbox expects those namespaces to be defined because ProvToolbox serializes to PROV-JSON format with them.
When deserializing records identifier, ProvToolbox uses [CustomQualifiedNameDeserializer#deserialize()](https://github.com/lucmoreau/ProvToolbox/blob/8b35e876dbda7f55a95dd182b78f7a28a5147a21/modules-core/prov-jsonld/src/main/java/org/openprovenance/prov/core/json/serialization/deserial/CustomQualifiedNameDeserializer.java#L40) method.
On line 41, the namespace is created, but it only has the \`"ex": "https://example.org/"\` namespace in it.

\`Namespace ns= (Namespace) deserializationContext.getAttribute(CustomNamespaceDeserializer.CONTEXT_KEY_NAMESPACE);\`

That means, on line 43:

\`ns.stringToQualifiedName(s, pf, false);\`

using [Namespace#stringToQualifiedName()](https://github.com/lucmoreau/ProvToolbox/blob/8b35e876dbda7f55a95dd182b78f7a28a5147a21/modules-core/prov-model/src/main/java/org/openprovenance/prov/model/Namespace.java#L224) where \`s="prov:value"\`, prov is not in prefixes. and ProvToolbox will throw an exception.
This issue was reported to the author of ProvToolbox and was resolved by adding, known namespaces to the [CustomNamespacePrefixDeserializer#deserialize()](https://github.com/lucmoreau/ProvToolbox/blob/96dd235aba6072c6e7671929b57b61088b9f6a38/modules-core/prov-jsonld/src/main/java/org/openprovenance/prov/core/json/serialization/deserial/CustomNamespacePrefixDeserializer.java#L34) method in this [commit](https://github.com/lucmoreau/ProvToolbox/commit/33907ad41c75c0cf246e2f67c045889408235b5b).