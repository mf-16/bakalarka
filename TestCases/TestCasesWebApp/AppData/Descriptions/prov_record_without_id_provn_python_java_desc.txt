When serializing PROVN format, Python uses custom [ProvNSerializer](https://github.com/trungdong/prov/blob/master/src/prov/serializers/provn.py).
Python serializes relation without id with no problems. It handles it in method [ProvRecord#get_provn()](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L481)

\`\`\`
if self._identifier:
        identifier = str(self._identifier)  # TODO: QName export
        if self.is_element():
            items.append(identifier)
        else:
            # this is a relation
            # relations use ; to separate identifiers
            relation_id = identifier + "; "
\`\`\`

if relation has identifier then it appends it to item, and if the identifier is null, it does not.

after that provn string representation is created like this on line 529: 
\`\`\`
prov_n = "%s(%s%s)" % (
            PROV_N_MAP[self.get_type()],
            relation_id,
            ", ".join(items),
        )
\`\`\`
prov_n is then written into the output stream.

When deserializing PROVN format, Java uses deserializer which uses parser generated by [ANTLR](https://www.antlr.org/) with this [grammar](https://github.com/lucmoreau/ProvToolbox/blob/master/modules-core/prov-n/src/main/antlr3/org/openprovenance/prov/notation/PROV_N.g). Parser reads the null identifier without issue and then Java has no problem creating wasGeneratedBy with null identifier.