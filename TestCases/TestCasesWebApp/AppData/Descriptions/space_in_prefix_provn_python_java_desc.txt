When creating the document in memory Python uses [NamespaceManager#add_namespace()](https://github.com/trungdong/prov/blob/master/src/prov/model.py#L1080) method, which does not validate the prefix, so it allows prefix with the space.

When serializing PROVN format, Python uses custom [ProvNSerializer](https://github.com/trungdong/prov/blob/master/src/prov/serializers/provn.py). When serilizing namespaces in the [ProvBundle#get_provn()](https://github.com/trungdong/prov/blob/master/src/prov/model.py#L1431) method, it just writes all namespaces and does no validation for prefixes.

When deserializing PROVN format, Java uses deserializer which uses parser generated by [ANTLR](https://www.antlr.org/) with this [grammar](https://github.com/lucmoreau/ProvToolbox/blob/master/modules-core/prov-n/src/main/antlr3/org/openprovenance/prov/notation/PROV_N.g).
The parser generated by ANTLR, reads the "ex ex" prefix only until first space. Therefore, 2 namespaces named "ex" are produced in parse tree.
Java can deal with this and assigns differnt name to the other one. But the problem starts when its reading the entity with identifier "ex ex:e".
Parser reads the part until first space as we already know, therefore entity with identifier "ex" is read.
This means that default namespace is expected, because there is no ":" character.

Since there is no default namespace in namespaces the exception is thrown:

\`Null namespace for ex at org.openprovenance.prov.model.Namespace.stringToQualifiedName(Namespace.java:236)\`

This means that when deserializing PROVN format, Java does not count with wrong prefix being passed in namespace, which is not particulary wrong.