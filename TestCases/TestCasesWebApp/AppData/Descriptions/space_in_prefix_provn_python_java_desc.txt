When creating a new namespace in memory, Prov Python uses [NamespaceManager#add_namespace()](https://github.com/trungdong/prov/blob/master/src/prov/model.py#L1080) method, which does not validate the prefix, so it allows prefix with the space.

Prov Python uses a custom [ProvNSerializer](https://github.com/trungdong/prov/blob/master/src/prov/serializers/provn.py) when serializing to PROV-N.
When serializing namespaces in the [ProvBundle#get_provn()](https://github.com/trungdong/prov/blob/master/src/prov/model.py#L1431) method, it just writes all namespaces and does not validate prefixes.

When deserializing from PROV-N, ProvToolbox uses deserializer which uses parser generated by [ANTLR](https://www.antlr.org/) with this [grammar](https://github.com/lucmoreau/ProvToolbox/blob/master/modules-core/prov-n/src/main/antlr3/org/openprovenance/prov/notation/PROV_N.g).
The parser only reads the "ex ex" prefix until the first space. Therefore, two namespaces named "ex" are produced in the parse tree.
ProvToolbox can deal with this and assign a different name to each. But the problem starts when it reads the entity with the identifier "ex ex:e".
Parser reads the part until the first space, as we already know. Therefore, an entity with the identifier "ex" is read.
A default namespace is expected because there is no ":" character.

Since there is no default namespace in namespaces, the exception is thrown:

\`Null namespace for ex at org.openprovenance.prov.model.Namespace.stringToQualifiedName(Namespace.java:236)\`

This means that when deserializing to PROV-N, ProvToolbox does not count with the wrong prefix being passed in a namespace, which is not particularly bad.