Python when serializing in json uses the json library more specifically json.dump method with custom encoder which is ProvJSONEncoder.
This encoder when serializing identifiers uses method
id_generator = AnonymousIDGenerator()

def real_or_anon_id(r):
       return r._identifier if r._identifier else id_generator.get_anon_id(r)

of class AnonymousIDGenerator which looks like this:
class AnonymousIDGenerator:
    def __init__(self):
        self._cache = {}
        self._count = 0

    def get_anon_id(self, obj, local_prefix="id"):
        if obj not in self._cache:
            self._count += 1
            self._cache[obj] = Identifier("_:%s%d" % (local_prefix, self._count))
        return self._cache[obj]
This generates id like this "_:id1". Python does not add blank namespace like Java does, because it can handle blank namespaces directly.

But this causes problem in Java which expects the blank namespace.
When deserializing the "_:id1" it uses CustomQualifiedNameDeserializer

public QualifiedName deserialize(String s, DeserializationContext deserializationContext) throws IOException {
        Namespace ns = (Namespace)((Map)CustomThreadConfig.getAttributes().get()).get("JSON_CONTEXT_KEY_NAMESPACE");
        return "type".equals(s) ? PROV_TYPE : ns.stringToQualifiedName(s, pf, false);
    }

s="_:id1", first namespace is created, ns namespace has only the ex namespace since thats the only thing Python serialized.
When trying ns.stringToQualifiedName(s, pf, false); it does not find the blank namespace and throws exception:
Null namespace for _:id1 namespace [Namespace (null) {ex=https://example.org/}, parent: null] (through reference chain: org.openprovenance.prov.core.json.serialization.SortedDocument["wasGeneratedBy"])

This issue was reported to the author of ProvToolbox, then issue was created on github https://github.com/lucmoreau/ProvToolbox/issues/213
and was resolved by adding the blank node to CustomNamespacePrefixDeserializer in commit https://github.com/lucmoreau/ProvToolbox/commit/9e43ff93cc81bc6d9a49bb3fcb9e7b453ebe4fde#diff-f9193296cfc4a285c9e55e98874b59085741b4deeb144aee9be6b25743f414cd.