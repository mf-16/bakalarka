Python represents the startTime and endTime as datetime.datetime(https://docs.python.org/3/library/datetime.html#datetime-objects)
Because when creating activity it uses the [_ensure_datetime()](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L34) function, which uses [dateutil.parser](https://dateutil.readthedocs.io/en/stable/parser.html), on line 36:

\` return dateutil.parser.parse(value)\`

The dateutil.parser#parse() method converts microseconds like this:

\`int(f.ljust(6, "0")[:6]\`

where \`f=microseconds\`. Therefore, the length of microseconds will always be 6 and high precision is lost.

This means that microseconds will always be 6 characters long. Therefore, some precision is lost.

When deserializing PROVN format, Java uses deserializer which uses parser generated by [ANTLR](https://www.antlr.org/) with this [grammar](https://github.com/lucmoreau/ProvToolbox/blob/master/modules-core/prov-n/src/main/antlr3/org/openprovenance/prov/notation/PROV_N.g).
The parser reads the microseconds right, but when converting String to XMLGregorianCalendar in method [ProvFactory#newISOTime()](https://github.com/lucmoreau/ProvToolbox/blob/974208486c9009f6313e1c21d462720ef72a7acd/modules-core/prov-model/src/main/java/org/openprovenance/prov/model/ProvFactory.java#L751), some precision is lost. On line 752:

\`return newTime(DatatypeConverter.parseDateTime(time).getTime());\`

DatatypeConverter#parseDateTime() calls method DatatypeConverter#_parseDateTime(), which looks like this:

\`\`\`
public static GregorianCalendar _parseDateTime(CharSequence s) {
        String val = WhiteSpaceProcessor.trim(s).toString();
        return datatypeFactory.newXMLGregorianCalendar(val).toGregorianCalendar();
    }
\`\`\`

in this method, we first create object of [XMLGregorianCalendar](https://docs.oracle.com/javase/8/docs/api/javax/xml/datatype/XMLGregorianCalendar.html) and then change it to [GregorianCalendar](https://docs.oracle.com/javase%2F7%2Fdocs%2Fapi%2F%2F/java/util/GregorianCalendar.html). This is where we lose microseconds, because when changing to GregorianCalendar, we get microseconds from XMLGregorianCalendar like this:
This is probably due to fact that GregorianCalendar represents microseconds as int not BigDecimal as XMLGregorianCalendar.

\`\`\`
 // TODO: Non-optimal solution for now.
// Efficient implementation would only store as BigDecimal
// when needed and millisecond otherwise.
fractionalSecond.movePointRight(3).intValue();
\`\`\`



