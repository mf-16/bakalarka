In Python, every record is subclass of [ProvRecord](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L228). ProvRecord represents prov:value attributes in the _attributes dictionary
In [constructor](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L236), on line 246, the _attributes dictionary is intialized: 

\`self._attributes = defaultdict(set)\`


This means that the values will be of type set, therefore more prov:value attributes are possible which is not complaint with the PROV-DM which states:
["The attribute prov:value may occur at most once in a set of attribute-value pairs."](https://www.w3.org/TR/prov-dm/#term-attribute-value)

When serializing PROVN format, there is no validation if prov:value is only used once.
But this is not wrong, since the serializer should not expect that PROV document with multiple prov:value attributes can be generated by Python. Its the model where every ProvRecord represent value as set, where the problem starts.

When deserializing PROVN format, Java uses deserializer which uses parser generated by [ANTLR](https://www.antlr.org/) with this [grammar](https://github.com/lucmoreau/ProvToolbox/blob/master/modules-core/prov-n/src/main/antlr3/org/openprovenance/prov/notation/PROV_N.g).
The parser reads all 3 prov:value attributes, but when creating the document in Java Entity class constructor is used:

The [Entity](https://github.com/lucmoreau/ProvToolbox/blob/20a9edf219e84c383d28283bc199d9ac32903687/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/Entity.java) class in Java has private field [value](https://github.com/lucmoreau/ProvToolbox/blob/20a9edf219e84c383d28283bc199d9ac32903687/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/Entity.java#L22).
This means that prov:value may occur at most once and is compliant with the PROV-DM.
When trying to put multiple prov:value attributes in Java, when creating the entity in [constructor](https://github.com/lucmoreau/ProvToolbox/blob/20a9edf219e84c383d28283bc199d9ac32903687/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/Entity.java#L31):
On line 39, the [ProvUtilities#populateAttributes()](https://github.com/lucmoreau/ProvToolbox/blob/20a9edf219e84c383d28283bc199d9ac32903687/modules-core/prov-model/src/main/java/org/openprovenance/prov/vanilla/ProvUtilities.java#L141) method is used

\`u.populateAttributes(attributes, labels, location, type, new LinkedList<>(), other, valueHolder);\`

It iterates through all attributes and assigns only first occurance of prov:value like this in switch on line 165:
\`\`\`
case PROV_VALUE:
    if (!foundValue) {
        foundValue = true;
        value[0] = (org.openprovenance.prov.model.Value)attribute;
    }
\`\`\`


And then in constructor, prov:value is assigned on line 40:

\`value=Optional.ofNullable(valueHolder[0]);\`

This means that the first value in attributes will be the value of entity.


When Java creates document for comparsion it can't create a document with multiple prov:value attributes. More about this in

\`\`\`
name: Multiple prov value
format: PROVN
serialize: java
deserialize: python
\`\`\`

Therefore Java compares both documents with 1 prov:value and the result is that they are equal, but they are no equal.