In Python, every record is subclass of [ProvRecord](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L228). ProvRecord represents prov:value attributes in the _attributes dictionary
In [constructor](https://github.com/trungdong/prov/blob/1cb710a26c623c5c706b1c6945c645efd9e925c0/src/prov/model.py#L236), on line 246, the _attributes dictionary is intialized: 

\`self._attributes = defaultdict(set)\`


This means that the values will be of type set, therefore more prov:value attributes are possible which is not complaint with the PROV-DM which states:
["The attribute prov:value may occur at most once in a set of attribute-value pairs."](https://www.w3.org/TR/prov-dm/#term-attribute-value)

When serializing JSON format, there is no validation if prov:value is only used once.
But this is not wrong, since the serializer should not expect that PROV document with multiple prov:value attributes can be generated by Python. Its the model where every ProvRecord represent value as set, where the problem starts.

When deserializing JSON format, Java uses [jackson](https://github.com/FasterXML/jackson) library.
During deserilization Java throws exception:

\`Null namespace for prov:value namespace [Namespace (null) {ex=https://example.org/}, parent: null] (through reference chain: org.openprovenance.prov.core.json.serialization.SortedDocument["entity"]->java.util.LinkedHashMap["ex:e"]->org.openprovenance.prov.vanilla.Entity["prov:value"])\`

This is because when Python serializes JSON format, it does not serialize it with known namespaces (prov, xsd), and Java expects those namespaces to be defined (Java serializes JSON format with them).
When deserializing records identifier, Java uses [CustomQualifiedNameDeserializer#deserialize()](https://github.com/lucmoreau/ProvToolbox/blob/8b35e876dbda7f55a95dd182b78f7a28a5147a21/modules-core/prov-jsonld/src/main/java/org/openprovenance/prov/core/json/serialization/deserial/CustomQualifiedNameDeserializer.java#L40) method.
On line 41, the namespace is created, but it only has the \`"ex": "https://example.org/"\` namespace in it.

\`Namespace ns= (Namespace) deserializationContext.getAttribute(CustomNamespaceDeserializer.CONTEXT_KEY_NAMESPACE);\`

That means, on line 43:

\`ns.stringToQualifiedName(s, pf, false);\`

using [Namespace#stringToQualifiedName()](https://github.com/lucmoreau/ProvToolbox/blob/8b35e876dbda7f55a95dd182b78f7a28a5147a21/modules-core/prov-model/src/main/java/org/openprovenance/prov/model/Namespace.java#L224) where \`s="prov:value"\`, prov is not in prefixes and Java will throw an exception.
This issue was reported to the author of ProvToolbox and was resolved by adding, known namespaces to the [CustomNamespacePrefixDeserializer#deserialize()](https://github.com/lucmoreau/ProvToolbox/blob/96dd235aba6072c6e7671929b57b61088b9f6a38/modules-core/prov-jsonld/src/main/java/org/openprovenance/prov/core/json/serialization/deserial/CustomNamespacePrefixDeserializer.java#L34) method in this [commit](https://github.com/lucmoreau/ProvToolbox/commit/33907ad41c75c0cf246e2f67c045889408235b5b).